// Copyright (c) 2024 The Stdlib Authors. License is Apache-2.0: http://www.apache.org/licenses/LICENSE-2.0
/// <reference types="./index.d.ts" />
import t from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-property@v0.1.0-esm/index.mjs";import e from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-only-accessor@v0.1.0-esm/index.mjs";import n from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-define-nonenumerable-read-write-accessor@v0.2.0-esm/index.mjs";import s from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-plain-object@v0.2.0-esm/index.mjs";import{isPrimitive as r}from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-probability@v0.2.0-esm/index.mjs";import i from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-is-function@v0.2.0-esm/index.mjs";import o from"https://cdn.jsdelivr.net/gh/stdlib-js/assert-has-own-property@v0.2.0-esm/index.mjs";import d from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-constant-function@v0.2.0-esm/index.mjs";import m from"https://cdn.jsdelivr.net/gh/stdlib-js/utils-noop@v0.2.0-esm/index.mjs";import{factory as l}from"https://cdn.jsdelivr.net/gh/stdlib-js/random-base-mt19937@v0.1.0-esm/index.mjs";import a from"https://cdn.jsdelivr.net/gh/stdlib-js/math-base-assert-is-nan@v0.2.0-esm/index.mjs";import p from"https://cdn.jsdelivr.net/gh/stdlib-js/array-to-json@v0.2.0-esm/index.mjs";import u from"https://cdn.jsdelivr.net/gh/stdlib-js/string-format@v0.1.1-esm/index.mjs";function h(){var h,f,g,j;if(0===arguments.length)f=l();else if(1===arguments.length&&s(arguments[0]))if(o(h=arguments[0],"prng")){if(!i(h.prng))throw new TypeError(u("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",h.prng));f=h.prng}else f=l(h);else{if(!r(j=arguments[0]))throw new TypeError(u("invalid argument. First argument must be a probability. Value: `%s`.",j));if(arguments.length>1){if(!s(h=arguments[1]))throw new TypeError(u("invalid argument. Options argument must be an object. Value: `%s`.",h));if(o(h,"prng")){if(!i(h.prng))throw new TypeError(u("invalid option. `%s` option must be a pseudorandom number generator function. Option: `%s`.","prng",h.prng));f=h.prng}else f=l(h)}else f=l()}return t(g=void 0===j?E:N,"NAME","bernoulli"),h&&h.prng?(t(g,"seed",null),t(g,"seedLength",null),n(g,"state",d(null),m),t(g,"stateLength",null),t(g,"byteLength",null),t(g,"toJSON",d(null)),t(g,"PRNG",f)):(e(g,"seed",c),e(g,"seedLength",v),n(g,"state",x,w),e(g,"stateLength",b),e(g,"byteLength",y),t(g,"toJSON",L),t(g,"PRNG",f),f=f.normalized),g;function c(){return f.seed}function v(){return f.seedLength}function b(){return f.stateLength}function y(){return f.byteLength}function x(){return f.state}function w(t){f.state=t}function L(){var t={type:"PRNG"};return t.name=g.NAME,t.state=p(f.state),t.params=void 0===j?[]:[j],t}function N(){return f()<=j?1:0}function E(t){return a(t)||t<0||t>1?NaN:f()<=t?1:0}}var f=h();t(f,"factory",h);export{f as default,h as factory};
//# sourceMappingURL=index.mjs.map
